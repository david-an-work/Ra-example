---
title: "Survey Data Visualization"
author: "David An"
date: "`r Sys.Date()`"
format: html
editor: visual
execute:
  freeze: auto
---

```{r setup, include=FALSE}
library(shiny)
library(DT)
library(ggplot2)
library(shinythemes)

# Create mock datasets
set.seed(123) #set seed for reproducibility

#customer satisfaction
customer_survey <- data.frame(
  customer_id = 1:100,
  age = sample(18:80, 100, replace = TRUE),
  gender = sample(c("Male", "Female", "Other"), 100, replace = TRUE, prob = c(0.45, 0.45, 0.1)),
  satisfaction_score = sample(1:5, 100, replace = TRUE),
  product_purchased = sample(c("Product A", "Product B", "Product C", "Product D"), 100, replace = TRUE),
  purchase_frequency = sample(c("Daily", "Weekly", "Monthly", "Rarely"), 100, replace = TRUE)
)

#employee satisfaction
employee_survey <- data.frame(
  employee_id = 1:100,
  department = sample(c("HR", "IT", "Sales", "Marketing", "Finance"), 100, replace = TRUE),
  years_at_company = sample(1:50, 100, replace = TRUE),
  job_satisfaction = sample(1:10, 100, replace = TRUE),
  work_life_balance = sample(1:10, 100, replace = TRUE),
  would_recommend = sample(c("Yes", "No"), 100, replace = TRUE)
)

#basic health identifiers
health_survey <- data.frame(
  participantID = 1:100,
  age_group = sample(c("18-25", "26-35", "36-45", "46-60", "60+"), 100, replace = TRUE),
  exercise_frequency = sample(0:7, 100, replace = TRUE),
  diet_type = sample(c("Vegetarian", "Non-Vegetarian", "Vegan"), 100, replace = TRUE),
  hours_of_sleep = sample(4:12, 100, replace = TRUE),
  stress_level = sample(1:10, 100, replace = TRUE)
)

#educational attainment
educational_survey <- data.frame(
  student_id = 1:100,
  grade_level = sample(c("Freshman", "Sophomore", "Junior", "Senior"), 100, replace = TRUE),
  favorite_subject = sample(c("Math", "Science", "History", "English", "Art"), 100, replace = TRUE),
  study_hours_per_week = sample(0:40, 100, replace = TRUE),
  participate_in_extracurriculars = sample(c("Yes", "No"), 100, replace = TRUE),
  gpa = round(runif(100, 2.0, 4.0), 2)
)

datasets <- list(
  "Customer Satisfaction" = customer_survey,
  "Employee Feedback" = employee_survey,
  "Health and Wellness" = health_survey,
  "Educational" = educational_survey
)
```

```{r}
# Define UI
ui <- fluidPage(
  theme = shinytheme("cerulean"),  # Adding a theme
  titlePanel("Survey Data Visualization"),
  sidebarLayout(
    sidebarPanel(
      selectInput("dataset", "Choose a dataset:", choices = names(datasets)), #dropdown for datasets
      fileInput("file1", "Choose CSV File", accept = ".csv"),
      uiOutput("variable_ui"), #choose variable
      actionButton("update", "Update"), #button to update the plot
      tags$style(
        HTML("
          .sidebar {background-color: #f9f9f9; padding: 15px; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.1);}
          .btn {margin-top: 10px;}
          .main-panel {padding: 15px;}
        ")
      )
    ),
    mainPanel(
      DTOutput("data_table"), #output table
      plotOutput("plot"), #plot for data
      tags$style(
        HTML("
          .dataTables_wrapper .dataTables_paginate .paginate_button {padding: 0; margin-left: 0;}
          .dataTables_wrapper .dataTables_paginate .paginate_button:hover {background: #007bff; color: white !important;}
        ")
      )
    )
  )
)

# Define server
server <- function(input, output, session) {
  
  # Reactive value to store the dataset
  data <- reactiveVal()
  
  observe({ # Observe dataset selection and update reactive data
    data(datasets[[input$dataset]])
  })

  observeEvent(input$file1, {  #Follow file input and update reactive data
    req(input$file1)
    df <- read.csv(input$file1$datapath)
    data(df)
  })
  
  # Dynamically generate UI for variable selection
  output$variable_ui <- renderUI({
    df <- data()
    selectInput("variable", "Choose a variable to plot:", choices = names(df))
  })
  
  output$data_table <- renderDT({  # Render the DataTable
    datatable(data(), options = list(pageLength = 10))
  })
  
  output$plot <- renderPlot({  # Render the plot
    req(input$variable)
    df <- data()
  
    # Create bar plot
    ggplot(df, aes_string(x = input$variable)) +
      geom_bar(fill = "#007bff", color = "white") +
      theme_minimal() +
      labs(title = paste("Distribution of", input$variable), x = input$variable, y = "Count")
  })
}

# Run the app 
shinyApp(ui = ui, server = server)
```
